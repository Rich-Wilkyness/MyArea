@page "/profile"
@using MyArea.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms

@inject MyArea.Data.ApplicationDbContext dbContext
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<PageTitle>Profile</PageTitle>

<div class="nav-icons">
    <div class="account-icon">
        <a href="/account">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" style="fill: #000; width: 100%; height: 100%;">
            <title>Account</title>
                <path d="M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304H178.3z"/>
            </svg>
        </a>
    </div>
        <div class="home-icon">
        <a href="/" alt="Home">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" style="fill: #000; width: 100%; height: 100%;">
            <title>Home</title>
                <path d="M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c0 2.7-.2 5.4-.5 8.1V472c0 22.1-17.9 40-40 40H456c-1.1 0-2.2 0-3.3-.1c-1.4 .1-2.8 .1-4.2 .1H416 392c-22.1 0-40-17.9-40-40V448 384c0-17.7-14.3-32-32-32H256c-17.7 0-32 14.3-32 32v64 24c0 22.1-17.9 40-40 40H160 128.1c-1.5 0-3-.1-4.5-.2c-1.2 .1-2.4 .2-3.6 .2H104c-22.1 0-40-17.9-40-40V360c0-.9 0-1.9 .1-2.8V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L564.8 231.5c8 7 12 15 11 24z"/>
            </svg>
        </a>
    </div>
    <div class="profile-icon">
        <a href="/profile">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" style="fill: #000; width: 100%; height: 100%;">
            <title>Profile</title>
                <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"/>
            </svg>
        </a>
    </div>
</div>


@if (userProfile != null)
{
    <div class="profile-page">
        <h1>User Profile</h1>

        <!-- User Name -->
        <div class="profile-username">
            <p><strong>User Name:</strong> @userProfile.UserName</p>
        </div>

        <!-- Email -->
        <div class="profile-email">
            <p><strong>Email:</strong> @userProfile.Email</p>
        </div>

        <!-- Hobbies -->
        <div class="profile-hobbies">
            <p><strong>Hobbies:</strong> @userProfile.Hobbies</p>
        </div>

        <!-- Profile Picture Upload -->
        <div class="profile-image-upload">
            <label for="profilePicture">Upload Profile Picture:</label>
            <InputFile id="profilePicture" OnChange="HandleFileSelected" />
        </div>

        <!-- Display Uploaded Image -->
        @if (!string.IsNullOrEmpty(uploadedImage)) 
        {
            <div class="profile-image-preview">
                <img src="@uploadedImage" alt="Profile Picture" style="max-width: 100px; max-height: 100px;" />
            </div>
        }
    </div>

    <div class="create-blog-page">
    <!-- Include UserProfile component here -->
    <CreateBlog />
    </div>

    <!-- Display Previous Blogs Real Functionality-->   
    <div class="user-blogs"> 
        <h2>Your Blogs</h2>
        <!-- Display user's actual blogs -->
        @if (userBlogs != null && userBlogs.Count > 0)  
        {
            @foreach (var blog in userBlogs)
            {
                <div class="blog-post">
                    <h3>@blog.Title</h3>
                    <p>@blog.Description</p>
                    <div>@blog.Content</div>
                </div>
            }
        }
        else
        {
            <p>No blogs found.</p>
        }

        <!-- Display the mock blog post -->
        <div class="blog-post">
            <h3>@blogPost.Title</h3>
            <p>@blogPost.Description</p>
            <div>@blogPost.Content</div>
        </div>
    </div>
}
else
{
    <p>Loading user profile...</p>
}


@code {
    private MyArea.UserProfile userProfile;
    private string uploadedImage;
    private List<BlogPost> userBlogs;
    private MyArea.BlogPost blogPost;

        
    protected override async Task OnInitializedAsync()
    {
        MockUserProfile();
        MockBlogPost();
        //SaveBlogPostAsync();
        await LoadUserBlogs();
        await LoadUserProfile();
        //HandleFileSelected(); need to fix handling and displaying images
    }

    //Mock User Profile   
    private void MockUserProfile()
    {
        // Mocking user profile data
        userProfile = new MyArea.UserProfile
        {
            UserName = "SampleUser",
            Email = "sampleuser@example.com",
            Hobbies = "Reading, Traveling",
            ImageURL = ""
        };
    }
    // Mock Blog display
    private void MockBlogPost()
    {
        blogPost = new MyArea.BlogPost
        {
            Id = 1,
            UserId = " ",
            Title = "Sample Blog Post",
            Description = "This is a test blog post.",
            Content = "This is the detailed content of the sample blog post."
        };
    }

    public async Task SaveBlogPostAsync(BlogPost blogPost)
    {
        dbContext.BlogPosts.Add(blogPost);
        await dbContext.SaveChangesAsync();
    }

    private async Task LoadUserProfile()
    {
        try
        {
            var username = "SampleUser"; // Replace with actual username or get dynamically
            userProfile = await dbContext.UserProfiles
                .Include(u => u.BlogPosts)
                .FirstOrDefaultAsync(u => u.UserName == username);
        }
        catch (Exception ex)
        {
            // handle exceptions
            Console.WriteLine($"Error loading user profile: {ex.Message}");
        }
    }

    private async Task LoadUserBlogs()
    {
        try
        {
            var userId = "1"; // Replace with actual logged-in user ID or get dynamically
            userBlogs = await dbContext.BlogPosts
                .Where(blog => blog.UserId == userId)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            // handle exceptions
            Console.WriteLine($"Error loading user blogs: {ex.Message}");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        var buffer = memoryStream.ToArray();
        uploadedImage = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";

        Console.WriteLine($"Uploaded file: {file.Name}");
    }
}